{"version":3,"sources":["components/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["request","url","fetch","then","response","ok","Error","status","statusText","json","getUser","userId","TodoList","state","titleFilter","statusFilter","handleFilter","target","setState","name","value","this","props","selectedUserId","selectUser","todos","filter","title","includes","trim","completed","className","type","placeholder","onChange","map","id","classNames","key","checked","readOnly","onClick","React","Component","defaultProps","CurrentUser","user","loadUser","a","data","prevProps","email","phone","clearUser","App","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed456e6b.chunk.js","sourcesContent":["\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nconst request = url => fetch(`${API_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const getTodos = () => request('/todos/');\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    titleFilter: '',\n    statusFilter: 'all',\n  };\n\n  handleFilter = ({ target }) => {\n    this.setState({ [target.name]: target.value });\n  }\n\n  render() {\n    const { selectedUserId, selectUser } = this.props;\n    const { titleFilter, statusFilter } = this.state;\n    let todos = this.props.todos;\n\n    todos = todos.filter(({ title }) => (\n      title && title.includes(titleFilter.trim())\n    ));\n\n    switch (statusFilter) {\n      case 'active':\n        todos = todos.filter(({ completed }) => !completed);\n        break;\n      case 'completed':\n        todos = todos.filter(({ completed }) => completed);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__options\">\n          <input\n            type=\"text\"\n            className=\"TodoList__filter-title\"\n            placeholder=\"Filter todos by title\"\n            name=\"titleFilter\"\n            value={titleFilter}\n            onChange={this.handleFilter}\n          />\n          <select\n            name=\"statusFilter\"\n            className=\"TodoList__filter-status\"\n            onChange={this.handleFilter}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(({ id, userId, title, completed }) => (\n              <li\n                className={classNames(\n                  'TodoList__item', completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked',\n                )}\n                key={id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={completed}\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={classNames(\n                    'button TodoList__user-button',\n                    selectedUserId === userId\n                    && 'TodoList__user-button--selected',\n                  )}\n                  onClick={() => selectUser(userId)}\n                >\n                  User&nbsp;\n                  {userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst todosTypes = PropTypes.arrayOf(PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n}));\n\nTodoList.propTypes = {\n  todos: todosTypes,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getUser } from '../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedUserId } = this.props;\n\n    if (prevProps.selectedUserId !== selectedUserId) {\n      this.loadUser(selectedUserId);\n    }\n  }\n\n  loadUser = async(selectedUserId) => {\n    const { data } = await getUser(selectedUserId);\n\n    this.setState({ user: data });\n  };\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          className=\"button CurrentUser__clear\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from '../src/components/api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const { data } = await getTodos();\n\n    this.setState({ todos: data });\n  }\n\n  selectUser = (userId) => {\n    const { selectedUserId } = this.state;\n\n    if (selectedUserId === userId) {\n      return;\n    }\n\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length\n            ? (\n              <TodoList\n                todos={todos}\n                selectedUserId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            )\n            : <h2>No loaded todos</h2>\n          }\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}